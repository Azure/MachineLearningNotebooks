We strongly believe in [Iteration](/handbook/values/#iteration) and delivering value in small increments. Iteration can be hard, especially when you lack product context or are working on a particularly risky/complex part of the codebase. If you are struggling to estimate an issue or determine whether it is feasible, it may be appropriate to first create a proof-of-concept MR. The goal of a proof-of-concept MR is to remove any major assumptions during planning and provide early feedback, therefore reducing risk from any future implementation.

* Create an MR, prefixed with `PoC: `.
* Explain what problem the PoC MR is trying to solve for in the MR description.
* Timebox it. Can you determine feasibility or a plan in less than 2-3 days?
* Identify a reviewer to provide feedback at the end of this period.
* Close the MR. Provide a summary in the original issue on what you learned from the PoC, including product and performance implications.
  * State whether you are able to move forwards with implementation or not.
  * Please do not close the issue.

The need for a proof-of-concept MR may signal that parts of our codebase or product have become overly complex. It's always worth discussing the MR as part of the retrospective so we can discuss how to avoid this step in the future.
